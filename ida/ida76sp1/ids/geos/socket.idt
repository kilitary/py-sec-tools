DECLARATION Nokia 9110 Geos 3.0 library socket.geo
;ALIGNMENT 2

; Module Name and Description
35 Name=socketdll Args=0 Drops=35
;---------------------------------------
1 Name=SocketRegister
2 Name=SocketCreate
3 Name=SocketBind
4 Name=SocketBindInDomain
5 Name=SocketGetSocketOption
6 Name=SocketSetSocketOption
7 Name=SocketConnect
8 Name=SocketListen
9 Name=SocketCheckListen
10 Name=SocketAccept
11 Name=SocketGetPeerName
12 Name=SocketGetSocketName
13 Name=SocketSend
14 Name=SocketRecv
15 Name=SocketCloseSend
16 Name=SocketClose
17 Name=SocketCloseDomainMedium
18 Name=SocketCheckReady
19 Name=SocketInterrupt
20 Name=SocketAddLoadOnMsg
21 Name=SocketAddLoadOnMsgInDomain
22 Name=SocketRemoveLoadOnMsg
23 Name=SocketRemoveLoadOnMsgInDomain
24 Name=SocketGetDomains
25 Name=SocketGetDomainMedia
26 Name=SocketGetAddressMedium
27 Name=SocketGetAddressController
28 Name=SocketGetAddressSize
29 Name=SocketCheckMediumConnection
30 Name=SocketResolve
31 Name=SocketCreateResolvedAddress
32 Name=ECCheckSocket
33 Name=DomainNameToIniCat
34 Name=DomainNameDone
35 Name=SOCKETCREATE Pascal=2 \
	Comment=Socket pascal SocketCreate(SocketDeliveryType delivery) in socket.goh
36 Name=SOCKETBIND Pascal=8 \
	Comment=SocketError pascal SocketBind(Socket s, SocketPort p, SocketBindFlags flags) in socket.goh
37 Name=SOCKETBINDINDOMAIN Pascal=12 \
	Comment=SocketError pascal SocketBindInDomain(Socket s, SocketPort p, SocketBindFlags flags, TCHAR *domain) in socket.goh
38 Name=SOCKETLISTEN Pascal=4 \
	Comment=SocketError pascal SocketListen(Socket s, int qSize) in socket.goh
39 Name=SOCKETADDLOADONMSG Pascal=12 \
	Comment=SocketError pascal SocketAddLoadOnMsg(SocketPort p, SocketLoadType slt, word disk, TCHAR *path) in socket.goh
40 Name=SOCKETADDLOADONMSGINDOMAIN Pascal=16 \
	Comment=SocketError pascal SocketAddLoadOnMsgInDomain(SocketPort p, SocketLoadType slt, word disk, TCHAR *path, TCHAR *domain) in socket.goh
41 Name=SOCKETREMOVELOADONMSG Pascal=4 \
	Comment=SocketError pascal SocketRemoveLoadOnMsg(SocketPort p) in socket.goh
42 Name=SOCKETREMOVELOADONMSGINDOMAIN Pascal=8 \
	Comment=SocketError pascal SocketRemoveLoadOnMsgInDomain(SocketPort p, TCHAR *domain) in socket.goh
43 Name=SOCKETCONNECT Pascal=8 \
	Comment=SocketError pascal SocketConnect(Socket s, SocketAddress *addr, int timeout) in socket.goh
44 Name=SOCKETCHECKLISTEN Pascal=10 \
	Comment=int pascal SocketCheckListen(SocketPort p, TCHAR *domain, int bufsize) in socket.goh
45 Name=SOCKETACCEPT Pascal=4 \
	Comment=Socket pascal SocketAccept(Socket s, int timeout) in socket.goh
46 Name=SOCKETGETPEERNAME Pascal=6 \
	Comment=SocketError pascal SocketGetPeerName(Socket s, SocketAddress *addr) in socket.goh
47 Name=SOCKETGETSOCKETNAME Pascal=6 \
	Comment=SocketError pascal SocketGetSocketName(Socket s, SocketAddress *addr) in socket.goh
48 Name=SOCKETSEND Pascal=14 \
	Comment=SocketError pascal SocketSend(Socket s, void *buffer, int bufSize, SocketSendFlags flags, SocketAddress *addr) in socket.goh
49 Name=SOCKETRECV Pascal=16 \
	Comment=int pascal SocketRecv(Socket s, void *buffer, int bufSize, int timeout, SocketRecvFlags flags, SocketAddress *addr) in socket.goh
50 Name=SOCKETCLOSESEND Pascal=2 \
	Comment=SocketError pascal SocketCloseSend(Socket s) in socket.goh
51 Name=SOCKETCLOSE Pascal=2 \
	Comment=SocketError pascal SocketClose(Socket s) in socket.goh
52 Name=SOCKETCLOSEDOMAINMEDIUM Pascal=10 \
	Comment=int pascal SocketCloseDomainMedium(char *domain, MediumAndUnit *mau, Boolean force) in socket.goh
53 Name=SOCKETCHECKREADY Pascal=8 \
	Comment=int pascal SocketCheckReady(SocketCheckRequest *requests, int numRequests, int timeout) in socket.goh
54 Name=SOCKETGETDOMAINS Pascal=4 \
	Comment=ChunkHandle pascal SocketGetDomains(optr domainList) in socket.goh
55 Name=SOCKETGETDOMAINMEDIA Pascal=8 \
	Comment=ChunkHandle pascal SocketGetDomainMedia(char *domain, optr mediaList) in socket.goh
56 Name=SOCKETGETADDRESSMEDIUM Pascal=8 \
	Comment=SocketError pascal SocketGetAddressMedium(SocketAddress *sa, MediumAndUnit *mau) in socket.goh
57 Name=SOCKETGETADDRESSCONTROLLER Pascal=4 \
	Comment=ClassStruct * pascal SocketGetAddressController(char *domain) in socket.goh
58 Name=SOCKETRESOLVE Pascal=16 \
	Comment=int pascal SocketResolve( char *domainName, byte *rawAddr, int addrSize, byte *result, int resultBuffSize ) in socket.goh
59 Name=SOCKETGETADDRESSSIZE Pascal=4 \
	Comment=int pascal SocketGetAddressSize(char *domain) in socket.goh
60 Name=SOCKETCREATERESOLVEDADDRESS Pascal=10 \
	Comment=MemHandle pascal SocketCreateResolvedAddress(const char *domainName, byte *rawAddr, int addrSize) in socket.goh
61 Name=SOCKETCHECKMEDIUMCONNECTION Pascal=16 \
	Comment=SocketError pascal SocketCheckMediumConnection(char *domain, byte *buffer, int *bufsize, MediumAndUnit *mau) in socket.goh
62 Name=SOCKETINTERRUPT Pascal=2 \
	Comment=SocketError pascal SocketInterrupt(Socket s) in socket.goh
63 Name=SOCKETGETINTSOCKETOPTION Pascal=4 \
	Comment=int pascal SocketGetIntSocketOption(Socket skt, SocketOption opt) in socket.goh
64 Name=SOCKETSETINTSOCKETOPTION Pascal=6 \
	Comment=void pascal SocketSetIntSocketOption(Socket skt, SocketOption opt, int newval) in socket.goh
65 Name=SocketOpenDomainMedium
66 Name=SocketInterruptResolve
67 Name=SOCKETOPENDOMAINMEDIUM Pascal=6 \
	Comment=SocketError pascal SocketOpenDomainMedium(SocketAddress *addr, int timeout) in socket.goh
68 Name=SOCKETINTERRUPTRESOLVE Pascal=10 \
	Comment=SocketError pascal SocketInterruptResolve(TCHAR *domain, byte *address, int addrSize) in socket.goh
69 Name=SocketGetMediumAddress
70 Name=SOCKETGETMEDIUMADDRESS Pascal=16 \
	Comment=SocketError pascal SocketGetMediumAddress(char *domain, byte *buffer, int *bufsize, MediumAndUnit *mau) in socket.goh
71 Name=SocketReset
72 Name=SOCKETRESET Pascal=2 \
	Comment=SocketError pascal SocketReset(Socket s) in socket.goh
73 Name=SocketSetMediumBusy
74 Name=SOCKETSETMEDIUMBUSY Pascal=10 \
	Comment=Boolean pascal SocketSetMediumBusy(char *domain, MediumAndUnit *mau, Boolean busy) in socket.goh
;------------------EOF------------------
